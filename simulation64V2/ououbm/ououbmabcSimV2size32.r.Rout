
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R 是免費軟體，不提供任何擔保。
在某些條件下您可以將其自由散布。
用 'license()' 或 'licence()' 來獲得散布的詳細條件。

R 是個合作計劃，有許多人為之做出了貢獻。
用 'contributors()' 來看詳細的情況並且
用 'citation()' 會告訴您如何在出版品中正確地參照 R 或 R 套件。

用 'demo()' 來看一些示範程式，用 'help()' 來檢視線上輔助檔案，或
用 'help.start()' 透過 HTML 瀏覽器來看輔助檔案。
用 'q()' 離開 R。

[Previously saved workspace restored]

> #setwd("~/Dropbox/ChihPingWang/Model1/abc_V2/simulation64V2/ououbm/")
> setwd("~/Dropbox/FCU/Teaching/Mentoring/2019Spring/ChihPingWang/Model1/abc_V2/simulation64V2/ououbm/")
> 
> 
> rm(list=ls())
> library(TreeSim)
Loading required package: ape
Loading required package: geiger
> library(EasyABC)
Loading required package: abc
Loading required package: abc.data
Loading required package: nnet
Loading required package: quantreg
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

Loading required package: MASS
Loading required package: locfit
locfit 1.5-9.1 	 2013-03-22
> library(coda)
> library(Sim.DiffProc)
Package 'Sim.DiffProc', version 4.4
browseVignettes('Sim.DiffProc') for more informations.
> library(MCMCpack)
##
## Markov Chain Monte Carlo Package (MCMCpack)
## Copyright (C) 2003-2019 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park
##
## Support provided by the U.S. National Science Foundation
## (Grants SES-0350646 and SES-0350613)
##
> library(ape)
> library(abc)
> library(nlme)
> library(adephylo)
Loading required package: ade4
> library(maps)
> library(phytools)
> library(phytools)
> library(phylobase)

Attaching package: ‘phylobase’

The following object is masked from ‘package:ape’:

    edges

> 
> ououbmmodel<-function(model.params,reg.params,root=root,tree=tree){
+   alpha.y<<-model.params[1]
+   alpha.x<-model.params[2]
+   theta.x<-model.params[3]
+   sigmasq.x<-model.params[4]
+   tau<-model.params[5]
+ 
+   b0<-reg.params[1]
+   b1<-reg.params[2]
+   b2<-reg.params[3]
+ 
+   n<-Ntip(tree)
+   x1nodestates<-array(NA,c(2*n-1))
+   x1nodestates[n+1]<- root$x1.ou.root
+   x2nodestates<-array(NA,c(2*n-1))
+   x2nodestates[n+1]<- root$x2.ou.root
+   optimnodestates<-array(NA,c(2*n-1))
+   optimnodestates[n+1]<- b0 + b1*root$x1.ou.root + b2*root$x2.ou.root
+   ynodestates<-array(NA,c(2*n-1))
+   ynodestates[n+1]<-root$y.ou.root
+ 
+   N<-dim(tree$edge)[1]
+   anc<-tree$edge[,1]
+   des<-tree$edge[,2]
+   treelength<-tree$edge.length
+ 
+   for(index in N:1){
+ 
+     x1ou.mean<-x1nodestates[anc[index]]*exp(-alpha.x*treelength[index]) + theta.x*(1-exp(-alpha.x*treelength[index]))
+     x1ou.sd<-sqrt((sigmasq.x/(2*alpha.x))*(1-exp(-2*alpha.x*treelength[index])))
+     x1nodestates[des[index]]<-rnorm(n=1,mean=x1ou.mean,sd=x1ou.sd)
+ 
+     x2ou.mean<-x2nodestates[anc[index]]*exp(-alpha.x*treelength[index]) + theta.x*(1-exp(-alpha.x*treelength[index]))
+     x2ou.sd<-sqrt((sigmasq.x/(2*alpha.x))*(1-exp(-2*alpha.x*treelength[index])))
+     x2nodestates[des[index]]<-rnorm(n=1,mean=x2ou.mean,sd=x2ou.sd)
+ 
+     optimnodestates[des[index]]<- b0 + b1*x1nodestates[des[index]] + b2*x2nodestates[des[index]]
+     sigmasq.theta<- b1^2*sigmasq.x + b2^2*sigmasq.x
+ 
+     ###
+     theta0.y<-optimnodestates[des[index]]
+     A<-(alpha.y*theta0.y/ (alpha.y-alpha.x)) *(exp((alpha.y-alpha.x)*treelength[index]) -1)
+     tilde.theta.y<- optimnodestates[des[index]]
+     B<- tilde.theta.y*(exp(alpha.y*treelength[index])-1) - (alpha.y*tilde.theta.y/(alpha.y-alpha.x))*(exp((alpha.y-alpha.x)*treelength[index]) -1)
+     vs<-sigmasq.theta*alpha.y^2*exp(2*alpha.y*treelength[index])*(1-exp(-2*alpha.x*treelength[index]))/ (2*alpha.x)
+     C<-pnorm(treelength[index],mean=0,sd=sqrt(vs))- 0.5#integral starts from 0
+     INTtime<- A+B+C
+     INT1<-exp(-alpha.y*treelength[index])*INTtime
+ 
+     ###
+     fexpr<-expression(exp(alpha.y*t)*w)
+     res<-st.int(fexpr,type="ito",M=1,lower=0,upper=treelength[index])
+     INT2<-tau*exp(-alpha.y*treelength[index])*median(res$X)
+ 
+     ynodestates[des[index]]<-ynodestates[anc[index]] + INT1 + INT2
+   }
+ 
+   simtrait<-ynodestates[1:n]
+   return(list(y=simtrait,x1=x1nodestates[1:n],x2=x2nodestates[1:n]))
+   #return(c(mean(simtrait),sd(simtrait)))
+ }
> 
> ououbmprior<-function(prior.model.params=prior.model.params,prior.reg.params=prior.reg.params){
+   alpha.y.rate <-prior.model.params["alpha.y.rate"]
+   alpha.x.rate <- prior.model.params["alpha.x.rate"]
+   theta.x.mean <-prior.model.params["theta.x.mean"]
+   theta.x.sd<-prior.model.params["theta.x.sd"]
+   sigmasq.x.shape <-prior.model.params["sigmasq.x.shape"]
+   sigmasq.x.scale <-prior.model.params["sigmasq.x.scale"]
+   tau.shape <- prior.model.params["tau.shape"]
+   tau.scale <- prior.model.params["tau.scale"]
+ 
+   alpha.y<-rexp(n=1, rate=alpha.y.rate)
+   alpha.x<-rexp(n=1,rate=alpha.x.rate)
+   theta.x<-rnorm(n=1,mean=theta.x.mean,sd=theta.x.sd)
+   sigmasq.x<-rinvgamma(n=1, shape=sigmasq.x.shape, scale=sigmasq.x.scale)
+   tau<-rinvgamma(n=1, shape=tau.shape, scale=tau.scale)
+ 
+   b0.min<-prior.reg.params[1]
+   b0.max<-prior.reg.params[2]
+   b1.min<-prior.reg.params[3]
+   b1.max<-prior.reg.params[4]
+   b2.min<-prior.reg.params[5]
+   b2.max<-prior.reg.params[6]
+   b0<-runif(n=1, min=b0.min, max=b0.max)
+   b1<-runif(n=1, min=b1.min, max=b1.max)
+   b2<-runif(n=1, min=b2.min, max=b2.max)
+ 
+   model.params<-c(alpha.y, alpha.x, theta.x, sigmasq.x, tau)
+   reg.params<- c(b0, b1, b2)
+ 
+   return(list(model.params=model.params, reg.params=reg.params))
+ }
> 
> sum.stat<-function(trait=trait,tree=tree){
+   names(trait)<-tree$tip.label
+   pic.trait<-pic(x=trait,phy=tree)
+   return(c(mean(trait),sd(trait),median(trait),skewness(trait),kurtosis(trait),mean(pic.trait),sd(pic.trait),median(pic.trait),skewness(pic.trait),kurtosis(pic.trait),phylosig(tree,x=trait,method = "K",test=T)$K,phylosig(tree,x=trait,method = "lambda",test=T)$lambda))
+ }
> 
> 
> 
> # main
> n<-32
> tree<-compute.brlen(stree(n,type="balanced"))
> plot(tree)
> tree<-reorder(tree,"postorder")
> 
> 
> root<-list(y.ou.sigmsq=1 ,y.ou.root=0, x1.ou.root=0, x2.ou.root=0,x1.bm.root=0, x2.bm.root=0)# Here we have root
> true.alpha.y<-0.2
> true.alpha.x<-0.125
> true.theta.x<-0
> true.sigmasq.x<-2
> true.tau<- 1
> #
> true.b0 <- 0
> true.b1 <- 1
> true.b2 <- 0.2
> 
> # hyper parameters
> alpha.y.rate <- 5
> alpha.x.rate <- 8
> theta.x.mean <- 0
> theta.x.sd  <- 1
> sigma.sq.x.shape <-2
> sigma.sq.x.scale <-1
> tau.shape <- 2
> tau.scale <- 1
> b0.min = -2
> b0.max = 2
> b1.min = -2
> b1.max = 2
> b2.min = -2
> b2.max = 2
> 
> 
> prior.model.params=c(alpha.y.rate, alpha.x.rate, theta.x.mean, theta.x.sd, sigma.sq.x.shape, sigma.sq.x.scale, tau.shape, tau.scale)
> names(prior.model.params)<-c("alpha.y.rate", "alpha.x.rate", "theta.x.mean","theta.x.sd","sigmasq.x.shape", "sigmasq.x.scale", "tau.shape", "tau.scale")
> prior.reg.params=c(b0.min, b0.max, b1.min, b1.max, b2.min, b2.max)
> prior.params <- ououbmprior(prior.model.params=prior.model.params,prior.reg.params=prior.reg.params)
> 
> true.trait<-ououbmmodel(model.params=c(true.alpha.y, true.alpha.x, true.theta.x, true.sigmasq.x, true.tau),reg.params=c(true.b0,true.b1,true.b2),root=root,tree=tree)
> 
> raw.sum.stat.y<-sum.stat(trait=true.trait$y,tree=tree)
> raw.sum.stat.x1<-sum.stat(trait=true.trait$x1,tree=tree)
> raw.sum.stat.x2<-sum.stat(trait=true.trait$x2,tree=tree)
> 
> sims<-10000
> tol<-0.1
> sim.ououbm.trait<-array(0,c(n,5,sims))
> model.params.array<-array(0,c(5,sims))
> rownames(model.params.array)<-c("alpha.y","alpha.x","theta.x","sigmasq.x","tau")
> reg.params.array<-array(0,c(3,sims))
> row.names(reg.params.array)<-c("b0", "b1", "b2")
> y.sum.stat.array<-array(NA,c(12,sims))
> rownames(y.sum.stat.array)<-c("y.trait.mean","y.trait.sd","y.trait.median","y.trait.skewness","y.trait.kurtosis","y.pic.trait.mean","y.pic.trait.sd","y.pic.trait.mediam","y.pic.trait.skewness","y.pic.trait.kurtosis","y.pic.trait.K","y.pic.trait.lambda")
> x1.sum.stat.array<-array(NA,c(12,sims))
> rownames(x1.sum.stat.array)<-c("x1.trait.mean","x1.trait.sd","x1.trait.median","x1.trait.skewness","x1.trait.kurtosis","x1.pic.trait.mean","x1.pic.trait.sd","x1.pic.trait.mediam","x1.pic.trait.skewness","x1.pic.trait.kurtosis","x1.pic.trait.K","x1.pic.trait.lambda")
> x2.sum.stat.array<-array(NA,c(12,sims))
> rownames(x2.sum.stat.array)<-c("x2.trait.mean","x2.trait.sd","x2.trait.median","x2.trait.skewness","x2.trait.kurtosis","x2.pic.trait.mean","x2.pic.trait.sd","x2.pic.trait.mediam","x2.pic.trait.skewness","x2.pic.trait.kurtosis","x2.pic.trait.K","x2.pic.trait.lambda")
> 
> post.model.params.array<-array(0,c(5,sims))
> rownames(post.model.params.array)<-c("alpha.y","alpha.x","theta.x","sigma.sq.x","tau")
> 
> for(simIndex in 1:sims){
+   if(simIndex %%  100 ==0){print(simIndex)}
+ #  simIndex<-1
+   prior.params <- ououbmprior(prior.model.params=prior.model.params,prior.reg.params=prior.reg.params)
+   model.params.array[,simIndex]<-prior.params$model.params#for record only
+   reg.params.array[,simIndex]<-prior.params$reg.params#for record only
+ #
+   sim.trait <-ououbmmodel(model.params=prior.params$model.params,reg.params=prior.params$reg.params,root=root,tree=tree)
+   sim.ououbm.trait[,1,simIndex]<-sim.trait$y
+   sim.ououbm.trait[,2,simIndex]<-sim.trait$x1
+   sim.ououbm.trait[,3,simIndex]<-sim.trait$x2
+   y.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$y,tree=tree)
+   x1.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$x1,tree=tree)
+   x2.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$x2,tree=tree)
+   }#end of loop
[1] 100
[1] 200
[1] 300
[1] 400
[1] 500
[1] 600
[1] 700
[1] 800
[1] 900
[1] 1000
[1] 1100
[1] 1200
[1] 1300
[1] 1400
[1] 1500
[1] 1600
[1] 1700
[1] 1800
[1] 1900
[1] 2000
[1] 2100
[1] 2200
[1] 2300
[1] 2400
[1] 2500
[1] 2600
[1] 2700
[1] 2800
[1] 2900
[1] 3000
[1] 3100
[1] 3200
[1] 3300
[1] 3400
[1] 3500
[1] 3600
[1] 3700
[1] 3800
[1] 3900
[1] 4000
[1] 4100
[1] 4200
[1] 4300
[1] 4400
[1] 4500
[1] 4600
[1] 4700
[1] 4800
[1] 4900
[1] 5000
[1] 5100
[1] 5200
[1] 5300
[1] 5400
[1] 5500
[1] 5600
[1] 5700
[1] 5800
[1] 5900
[1] 6000
[1] 6100
[1] 6200
[1] 6300
[1] 6400
[1] 6500
[1] 6600
[1] 6700
[1] 6800
[1] 6900
[1] 7000
[1] 7100
[1] 7200
[1] 7300
[1] 7400
[1] 7500
[1] 7600
[1] 7700
[1] 7800
[1] 7900
[1] 8000
[1] 8100
[1] 8200
[1] 8300
[1] 8400
[1] 8500
[1] 8600
[1] 8700
[1] 8800
[1] 8900
[1] 9000
[1] 9100
[1] 9200
[1] 9300
[1] 9400
[1] 9500
[1] 9600
[1] 9700
[1] 9800
[1] 9900
[1] 10000
> #
> 
> sim.sum.stat <- cbind(t(y.sum.stat.array),t(x1.sum.stat.array),t(x2.sum.stat.array))
> ououbm.par.sim <- cbind(t(model.params.array),t(reg.params.array))
> 
> ### The rejection alogoritm
> rej <- abc(target=c(raw.sum.stat.y,raw.sum.stat.x1,raw.sum.stat.x2), param=ououbm.par.sim, sumstat=sim.sum.stat, tol=tol, method="rejection"  )
> post.ououbm <- as.data.frame(rej$unadj.values)
> 
> save.image(paste("ououbmsimV2size",n,".RData",sep=""))
> 
> 
> 
> 
> #Credible Interval for alpha.x
> # postTheta<-data.frame(rej$unadj.values)
> # postTheta$alpha.x
> # rep<-50
> # post_alpha.x<-sample(postTheta$alpha.x,rep,replace=FALSE)
> # sample_alpha.x<-matrix(NA,rep,sims*tolrate)
> # for(repIndex in 1:rep){
> #  # repIndex<-1
> #   print(paste("repIndex",repIndex,sep=""))
> #   true.tau<- post_alpha.x[repIndex]
> #   true.trait<-ououbmmodel(model.params=c(true.alpha.y, true.alpha.x, true.theta.x, true.sigma.sq.x, true.tau),reg.params=c(true.b0,true.b1,true.b2),root=root,tree=tree)
> #
> #   raw.sum.stat.y<-sum.stat(trait=true.trait$y,tree=tree)
> #   raw.sum.stat.x1<-sum.stat(trait=true.trait$x1,tree=tree)
> #   raw.sum.stat.x2<-sum.stat(trait=true.trait$x2,tree=tree)
> #
> #   for(simIndex in 1:sims){
> #     if(simIndex %% 100 == 0){print(simIndex)}
> #
> #     sim.alpha.x<-rexp(n=1,rate=alpha.x.rate)
> #     model.params<-c(true.alpha.y, sim.alpha.x, true.theta.x, true.sigma.sq.x, true.tau)
> #     reg.params<-c(true.b0,true.b1,true.b2)
> #     model.params.array[,simIndex]<-model.params
> #     reg.params.array[,simIndex]<-reg.params
> #     sim.trait<-ououbmmodel(model.params=model.params,reg.params= reg.params,root=root,tree=tree)
> #     sim.ououbm.trait[,1,simIndex]<-sim.trait$y
> #     sim.ououbm.trait[,2,simIndex]<-sim.trait$x1
> #     sim.ououbm.trait[,3,simIndex]<-sim.trait$x2
> #     y.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$y,tree=tree)
> #     x1.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$x1,tree=tree)
> #     x2.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$x2,tree=tree)
> #   }
> #   sim.sum.stat <- cbind(t(y.sum.stat.array),t(x1.sum.stat.array),t(x2.sum.stat.array))
> #   head(sim.sum.stat)
> #   ououbm.par.sim <- cbind(t(model.params.array),t(reg.params.array))
> #   ououbm.post.sim <- cbind(t(post.model.params.array),t(post.reg.params.array))
> #
> #   rej <- abc(target=c(raw.sum.stat.y,raw.sum.stat.x1,raw.sum.stat.x2), param=ououbm.par.sim, sumstat=sim.sum.stat, tol=tolrate, method="rejection"  )
> #
> #
> #   postTheta_sim<-data.frame(rej$unadj.values)
> #   sample_alpha.x[repIndex,]<-postTheta_sim$alpha.x
> #   }
> #
> # summary(sample_alpha.x)
> # dim(sample_alpha.x)
> #
> # sample_alpha.x_median<-apply(sample_alpha.x,1,median)
> # png("alpha.x64.png")
> #
> # hist(postTheta$alpha.x,main = paste("OUOUBM ",expression(alpha.x),sep=""),breaks=5,freq=FALSE,cex.main=3.5,xlab=expression(alpha),ylab="density",col="lightgreen",ylim=c(0,4))
> # lines(density(postTheta$alpha.x))
> #
> # min.ylab<-min(density(postTheta$alpha.x)$y)
> # max.ylab<-max(density(postTheta$alpha.x)$y)
> #
> # abline(v=quantile(postTheta$alpha.x,prob=c(0.025,0.975)),col="red",lty=2)
> # points(post_alpha.x,seq(min.ylab,max.ylab,length=rep),pch=19,cex=0.7)
> # k<-(sample_alpha.x_median>quantile(postTheta$alpha.x,prob=0.975))+(sample_alpha.x_median<quantile(postTheta$alpha.x,prob=0.025))
> # points(sample_alpha.x_median,seq(min.ylab,max.ylab,length=rep),pch=19,cex=0.7,col=c("blue","red")[1+k])
> # segments(sample_alpha.x_median,seq(min.ylab,max.ylab,length=rep),post_alpha.x,seq(min.ylab,max.ylab,length=rep),col="grey")
> # dev.off()
> # save.image("ououbm_bci_alpha.x64.RData")
> 
> proc.time()
     user    system   elapsed 
 7696.701    50.067 68071.042 
