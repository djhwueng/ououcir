
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R 是免費軟體，不提供任何擔保。
在某些條件下您可以將其自由散布。
用 'license()' 或 'licence()' 來獲得散布的詳細條件。

R 是個合作計劃，有許多人為之做出了貢獻。
用 'contributors()' 來看詳細的情況並且
用 'citation()' 會告訴您如何在出版品中正確地參照 R 或 R 套件。

用 'demo()' 來看一些示範程式，用 'help()' 來檢視線上輔助檔案，或
用 'help.start()' 透過 HTML 瀏覽器來看輔助檔案。
用 'q()' 離開 R。

[Previously saved workspace restored]

> #setwd("~/Dropbox/ChihPingWang/Model1/abc_V2/simulation64V2/oubmcir/")
> 
> setwd("~/Dropbox/FCU/Teaching/Mentoring/2019Spring/ChihPingWang/Model1/abc_V2/simulation64V2/oubmcir/")
> 
> 
> rm(list=ls())
> library(TreeSim)
Loading required package: ape
Loading required package: geiger
> library(EasyABC)
Loading required package: abc
Loading required package: abc.data
Loading required package: nnet
Loading required package: quantreg
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

Loading required package: MASS
Loading required package: locfit
locfit 1.5-9.1 	 2013-03-22
> library(coda)
> library(Sim.DiffProc)
Package 'Sim.DiffProc', version 4.4
browseVignettes('Sim.DiffProc') for more informations.
> library(MCMCpack)
##
## Markov Chain Monte Carlo Package (MCMCpack)
## Copyright (C) 2003-2019 Andrew D. Martin, Kevin M. Quinn, and Jong Hee Park
##
## Support provided by the U.S. National Science Foundation
## (Grants SES-0350646 and SES-0350613)
##
> library(ape)
> library(abc)
> library(nlme)
> library(adephylo)
Loading required package: ade4
> library(maps)
> library(phytools)
> library(phytools)
> library(phylobase)

Attaching package: ‘phylobase’

The following object is masked from ‘package:ape’:

    edges

> 
> oubmcirmodel<-function(model.params,reg.params,root=root,tree=tree){
+   alpha.y<-model.params[1]
+   sigmasq.x<-model.params[2]
+   alpha.tau<-model.params[3]
+   theta.tau<-model.params[4]
+   sigmasq.tau<-model.params[5]
+   b0<-reg.params[1]
+   b1<-reg.params[2]
+   b2<-reg.params[3]
+ 
+   n<-Ntip(tree)
+   x1nodestates<-array(NA,c(2*n-1))
+   x1nodestates[n+1]<- root$x1.bm.root
+   x2nodestates<-array(NA,c(2*n-1))
+   x2nodestates[n+1]<- root$x2.bm.root
+   optimnodestates<-array(NA,c(2*n-1))
+   optimnodestates[n+1]<-  b0 + b1*root$x1.bm.root + b2*root$x2.bm.root
+   sigmasqnodestates<-array(NA,c(2*n-1))
+   sigmasqnodestates[n+1]<- root$y.ou.sigmsq
+   ynodestates<-array(NA,c(2*n-1))
+   ynodestates[n+1]<-root$y.ou.root
+ 
+   N<-dim(tree$edge)[1]
+   anc<-tree$edge[,1]
+   des<-tree$edge[,2]
+   treelength<-tree$edge.length
+   for(index in N:1){
+ 
+     x1nodestates[des[index]]<-rnorm(n=1,mean=x1nodestates[anc[index]],sd= sqrt(sigmasq.x*treelength[index]))
+     x2nodestates[des[index]]<-rnorm(n=1,mean=x2nodestates[anc[index]],sd= sqrt(sigmasq.x*treelength[index]))
+ 
+     optimnodestates[des[index]]<- b0 + b1*x1nodestates[des[index]] + b2*x2nodestates[des[index]]
+     sigmasq.theta<- b1^2*sigmasq.x + b2^2*sigmasq.x
+ 
+     c<- sigmasq.tau*(1-exp(-alpha.tau*treelength[index]))/(4*alpha.tau)
+     k<- (4*theta.tau*alpha.tau)/sigmasq.tau
+     tau0<-sigmasqnodestates[anc[index]]
+     lambda<-4*alpha.tau*exp(-alpha.tau*treelength[index])
+     lambda<-lambda/(sigmasq.tau*(1-exp(-alpha.tau*treelength[index])))*tau0
+     tmp = rchisq(n=1, df=k, ncp = lambda)
+     sig_u <- c*tmp
+     sigmasqnodestates[des[index]]<-sig_u
+ 
+     ###
+     INT1var<-sigmasq.theta*(exp(2*alpha.y*treelength[index])-1)/(2*alpha.y)
+     INT1<-exp(-alpha.y*treelength[index])* rnorm(n=1,mean=0,sd=sqrt(INT1var))
+ 
+     ###
+     a.var<-(1-exp(-2*alpha.y*treelength[index]))/(2*alpha.y)
+     a <- rnorm(n=1, mean=0, sd=sqrt(a.var))
+     b.var<- (sigmasqnodestates[anc[index]]-theta.tau)^2/(2*(alpha.y-alpha.tau))
+     b.var<-b.var*(exp(-2*alpha.tau*treelength[index])-exp(-2*alpha.y*treelength[index]))
+     b <- rnorm(n=1, mean=0, sd=sqrt(b.var))
+ 
+     n_t <- 10
+     n_s <- 10
+     outer.int.sum=0
+     for(outer.index in 1:n_t){
+       inner.int.sum = 0
+       for(inner.index in 1:n_s){
+         c<- sigmasq.tau*(1-exp(-alpha.tau*(inner.index/n_s)))/(4*alpha.tau)
+         k<- (4*theta.tau*alpha.tau)/sigmasq.tau
+         lambda<- 4*alpha.tau*exp(-alpha.tau*(inner.index/n_s))
+         tau0<-sigmasqnodestates[anc[index]]
+         lambda<-lambda/(sigmasq.tau*(1-exp(-alpha.tau*(inner.index/n_s))))*tau0
+         tmp = rchisq(n=1, df=k, ncp = lambda)
+         sig_u <- c*tmp
+         inner.int.sum  <-  inner.int.sum + exp(alpha.tau*(inner.index/n_s))*rnorm(n=1,mean=0, sd=sqrt(1/n_s))*sqrt(sig_u)
+       }
+       outer.int.sum <- outer.int.sum + exp(-(alpha.y+alpha.tau)*(outer.index/n_t))*inner.int.sum*rnorm(n=1,mean=0, sd=sqrt(1/n_t))
+     }
+     c <- sqrt(sigmasq.tau)*outer.int.sum
+     INT2 <- (a + b + c)
+     ynodestates[des[index]]<-ynodestates[anc[index]] + INT1 + INT2
+   }
+   simtrait<-ynodestates[1:n]
+   return(list(y=simtrait,x1=x1nodestates[1:n],x2=x2nodestates[1:n]))
+ }
> 
> oubmcirprior<-function(prior.model.params=prior.model.params,prior.reg.params=prior.reg.params){
+   alpha.y.rate <-prior.model.params["alpha.y.rate"]# assume exponential
+   sigmasq.x.shape <-prior.model.params["sigmasq.x.shape"]# assume invgamma
+   sigmasq.x.scale <-prior.model.params["sigmasq.x.scale"]
+   alpha.tau.rate <- prior.model.params["alpha.tau.rate"]# assume exponential
+   theta.tau.mean <- prior.model.params["theta.tau.mean"] #assume LogNormal
+   theta.tau.sd <- prior.model.params["theta.tau.sd"]
+   sigmasq.tau.shape <- prior.model.params["sigmasq.tau.shape"]# assume inv gamma
+   sigmasq.tau.scale <- prior.model.params["sigmasq.tau.scale"]
+ 
+   alpha.y<-rexp(n=1, rate=alpha.y.rate)
+   sigmasq.x<-rinvgamma(n=1, shape=sigmasq.x.shape, scale=sigmasq.x.scale)
+   alpha.tau <- rexp(n=1, rate=alpha.tau.rate)
+   theta.tau <-  rlnorm(n=1, meanlog=theta.tau.mean, sdlog=theta.tau.sd)
+   sigmasq.tau<-rinvgamma(n=1, shape=sigmasq.tau.shape, scale=sigmasq.tau.scale)
+ 
+   b0.min<-prior.reg.params[1]
+   b0.max<-prior.reg.params[2]
+   b1.min<-prior.reg.params[3]
+   b1.max<-prior.reg.params[4]
+   b2.min<-prior.reg.params[5]
+   b2.max<-prior.reg.params[6]
+   b0<-runif(n=1, min=b0.min, max=b0.max)
+   b1<-runif(n=1, min=b1.min, max=b1.max)
+   b2<-runif(n=1, min=b2.min, max=b2.max)
+ 
+   model.params<-c(alpha.y, sigmasq.x, alpha.tau, theta.tau, sigmasq.tau)
+   reg.params<- c(b0, b1, b2)
+ 
+   return(list(model.params=model.params, reg.params=reg.params))
+ }
> 
> sum.stat<-function(trait=trait,tree=tree){
+   names(trait)<-tree$tip.label
+   pic.trait<-pic(x=trait,phy=tree)
+   return(c(mean(trait),sd(trait),median(trait),skewness(trait),kurtosis(trait),mean(pic.trait),sd(pic.trait),median(pic.trait),skewness(pic.trait),kurtosis(pic.trait),phylosig(tree,x=trait,method = "K",test=T)$K,phylosig(tree,x=trait,method = "lambda",test=T)$lambda))
+ }
> 
> ### main
> n<-32 # we actually need to do 10, 30, 50, 100 for good
> tree<-compute.brlen(stree(n,type = "balanced"))
> tree<-reorder(tree,"postorder")
> plot(tree)
> nodelabels()
> tiplabels()
> 
> 
> root<-list(y.ou.sigmsq=1 ,y.ou.root=0, x1.ou.root=0, x2.ou.root=0,x1.bm.root=0, x2.bm.root=0)# Here we have root
> true.alpha.y<-0.2
> true.sigma.sq.x<-2
> true.alpha.tau<-0.25
> true.theta.tau<-0.5
> true.sigmasq.tau<- 1
> 
> true.b0 <- 0
> true.b1 <- 1
> true.b2 <- 0.2
> 
> # hyper paramters
> alpha.y.rate <-5# assume exponential
> sigmasq.x.shape <-2# assume invgamma
> sigmasq.x.scale <-2
> alpha.tau.rate <- 4# assume exponential
> theta.tau.mean <- 0.5 #assume LogNormal
> theta.tau.sd <- 1
> sigmasq.tau.shape <- 2 # assume inv gamma
> sigmasq.tau.scale <- 1
> b0.min=-2
> b0.max=2
> b1.min=-2
> b1.max=2
> b2.min=-2
> b2.max=2
> 
> prior.model.params=c(alpha.y.rate, sigmasq.x.shape, sigmasq.x.scale, alpha.tau.rate, theta.tau.mean, theta.tau.sd, sigmasq.tau.shape, sigmasq.tau.scale)
> names(prior.model.params)<-c("alpha.y.rate", "sigmasq.x.shape", "sigmasq.x.scale", "alpha.tau.rate", "theta.tau.mean", "theta.tau.sd", "sigmasq.tau.shape", "sigmasq.tau.scale")
> prior.reg.params=c(b0.min, b0.max, b1.min, b1.max, b2.min, b2.max)
> prior.params <- oubmcirprior(prior.model.params = prior.model.params, prior.reg.params=prior.reg.params)
> 
> true.trait <- oubmcirmodel(model.params = c(true.alpha.y, true.sigma.sq.x, true.alpha.tau, true.theta.tau, true.sigmasq.tau),reg.params = c(true.b0,true.b1,true.b2), root=root, tree=tree)
> sim.trait <- oubmcirmodel(model.params = prior.params$model.params, reg.params = prior.params$reg.params, root=root, tree=tree)
> 
> raw.sum.stat.y <- sum.stat(trait = true.trait$y, tree=tree)
> raw.sum.stat.x1 <- sum.stat(trait = true.trait$x1, tree=tree)
> raw.sum.stat.x2 <- sum.stat(trait = true.trait$x2, tree=tree)
> 
> sims<-10000
> tol<-0.1
> sim.oubmcir.trait<-array(0,c(n,3,sims))
> model.params.array<-array(0,c(5,sims))
> rownames(model.params.array)<-c("alpha.y","sigmasq.x","alpha.tau","theta.tau","sigmasq.tau")
> reg.params.array<-array(0,c(3,sims))
> row.names(reg.params.array)<-c("b0", "b1", "b2")
> y.sum.stat.array<-array(NA,c(12,sims))
> rownames(y.sum.stat.array)<-c("y.trait.mean","y.trait.sd","y.trait.median","y.trait.skewness","y.trait.kurtosis","y.pic.trait.mean","y.pic.trait.sd","y.pic.trait.mediam","y.pic.trait.skewness","y.pic.trait.kurtosis","y.pic.trait.K","y.pic.trait.lambda")
> x1.sum.stat.array<-array(NA,c(12,sims))
> rownames(x1.sum.stat.array)<-c("x1.trait.mean","x1.trait.sd","x1.trait.median","x1.trait.skewness","x1.trait.kurtosis","x1.pic.trait.mean","x1.pic.trait.sd","x1.pic.trait.mediam","x1.pic.trait.skewness","x1.pic.trait.kurtosis","x1.pic.trait.K","x1.pic.trait.lambda")
> x2.sum.stat.array<-array(NA,c(12,sims))
> rownames(x2.sum.stat.array)<-c("x2.trait.mean","x2.trait.sd","x2.trait.median","x2.trait.skewness","x2.trait.kurtosis","x2.pic.trait.mean","x2.pic.trait.sd","x2.pic.trait.mediam","x2.pic.trait.skewness","x2.pic.trait.kurtosis","x2.pic.trait.K","x2.pic.trait.lambda")
> 
> for(simIndex in 1:sims){
+   if(simIndex %%10==0){print(simIndex)}
+   prior.params<-oubmcirprior(prior.model.params = prior.model.params, prior.reg.params = prior.reg.params)
+   model.params.array[,simIndex]<-prior.params$model.params#for record only
+   reg.params.array[,simIndex]<-prior.params$reg.params#for record only
+ 
+   sim.trait <-oubmcirmodel(model.params=prior.params$model.params,reg.params=prior.params$reg.params,root=root,tree=tree)
+   sim.oubmcir.trait[,1,simIndex]<-sim.trait$y
+   sim.oubmcir.trait[,2,simIndex]<-sim.trait$x1
+   sim.oubmcir.trait[,3,simIndex]<-sim.trait$x2
+   y.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$y,tree=tree)
+   x1.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$x1,tree=tree)
+   x2.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$x2,tree=tree)
+ }# end of loop
[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 110
[1] 120
[1] 130
[1] 140
[1] 150
[1] 160
[1] 170
[1] 180
[1] 190
[1] 200
[1] 210
[1] 220
[1] 230
[1] 240
[1] 250
[1] 260
[1] 270
[1] 280
[1] 290
[1] 300
[1] 310
[1] 320
[1] 330
[1] 340
[1] 350
[1] 360
[1] 370
[1] 380
[1] 390
[1] 400
[1] 410
[1] 420
[1] 430
[1] 440
[1] 450
[1] 460
[1] 470
[1] 480
[1] 490
[1] 500
[1] 510
[1] 520
[1] 530
[1] 540
[1] 550
[1] 560
[1] 570
[1] 580
[1] 590
[1] 600
[1] 610
[1] 620
[1] 630
[1] 640
[1] 650
[1] 660
[1] 670
[1] 680
[1] 690
[1] 700
[1] 710
[1] 720
[1] 730
[1] 740
[1] 750
[1] 760
[1] 770
[1] 780
[1] 790
[1] 800
[1] 810
[1] 820
[1] 830
[1] 840
[1] 850
[1] 860
[1] 870
[1] 880
[1] 890
[1] 900
[1] 910
[1] 920
[1] 930
[1] 940
[1] 950
[1] 960
[1] 970
[1] 980
[1] 990
[1] 1000
[1] 1010
[1] 1020
[1] 1030
[1] 1040
[1] 1050
[1] 1060
[1] 1070
[1] 1080
[1] 1090
[1] 1100
[1] 1110
[1] 1120
[1] 1130
[1] 1140
[1] 1150
[1] 1160
[1] 1170
[1] 1180
[1] 1190
[1] 1200
[1] 1210
[1] 1220
[1] 1230
[1] 1240
[1] 1250
[1] 1260
[1] 1270
[1] 1280
[1] 1290
[1] 1300
[1] 1310
[1] 1320
[1] 1330
[1] 1340
[1] 1350
[1] 1360
[1] 1370
[1] 1380
[1] 1390
[1] 1400
[1] 1410
[1] 1420
[1] 1430
[1] 1440
[1] 1450
[1] 1460
[1] 1470
[1] 1480
[1] 1490
[1] 1500
[1] 1510
[1] 1520
[1] 1530
[1] 1540
[1] 1550
[1] 1560
[1] 1570
[1] 1580
[1] 1590
[1] 1600
[1] 1610
[1] 1620
[1] 1630
[1] 1640
[1] 1650
[1] 1660
[1] 1670
[1] 1680
[1] 1690
[1] 1700
[1] 1710
[1] 1720
[1] 1730
[1] 1740
[1] 1750
[1] 1760
[1] 1770
[1] 1780
[1] 1790
[1] 1800
[1] 1810
[1] 1820
[1] 1830
[1] 1840
[1] 1850
[1] 1860
[1] 1870
[1] 1880
[1] 1890
[1] 1900
[1] 1910
[1] 1920
[1] 1930
[1] 1940
[1] 1950
[1] 1960
[1] 1970
[1] 1980
[1] 1990
[1] 2000
[1] 2010
[1] 2020
[1] 2030
[1] 2040
[1] 2050
[1] 2060
[1] 2070
[1] 2080
[1] 2090
[1] 2100
[1] 2110
[1] 2120
[1] 2130
[1] 2140
[1] 2150
[1] 2160
[1] 2170
[1] 2180
[1] 2190
[1] 2200
[1] 2210
[1] 2220
[1] 2230
[1] 2240
[1] 2250
[1] 2260
[1] 2270
[1] 2280
[1] 2290
[1] 2300
[1] 2310
[1] 2320
[1] 2330
[1] 2340
[1] 2350
[1] 2360
[1] 2370
[1] 2380
[1] 2390
[1] 2400
[1] 2410
[1] 2420
[1] 2430
[1] 2440
[1] 2450
[1] 2460
[1] 2470
[1] 2480
[1] 2490
[1] 2500
[1] 2510
[1] 2520
[1] 2530
[1] 2540
[1] 2550
[1] 2560
[1] 2570
[1] 2580
[1] 2590
[1] 2600
[1] 2610
[1] 2620
[1] 2630
[1] 2640
[1] 2650
[1] 2660
[1] 2670
[1] 2680
[1] 2690
[1] 2700
[1] 2710
[1] 2720
[1] 2730
[1] 2740
[1] 2750
[1] 2760
[1] 2770
[1] 2780
[1] 2790
[1] 2800
[1] 2810
[1] 2820
[1] 2830
[1] 2840
[1] 2850
[1] 2860
[1] 2870
[1] 2880
[1] 2890
[1] 2900
[1] 2910
[1] 2920
[1] 2930
[1] 2940
[1] 2950
[1] 2960
[1] 2970
[1] 2980
[1] 2990
[1] 3000
[1] 3010
[1] 3020
[1] 3030
[1] 3040
[1] 3050
[1] 3060
[1] 3070
[1] 3080
[1] 3090
[1] 3100
[1] 3110
[1] 3120
[1] 3130
[1] 3140
[1] 3150
[1] 3160
[1] 3170
[1] 3180
[1] 3190
[1] 3200
[1] 3210
[1] 3220
[1] 3230
[1] 3240
[1] 3250
[1] 3260
[1] 3270
[1] 3280
[1] 3290
[1] 3300
[1] 3310
[1] 3320
[1] 3330
[1] 3340
[1] 3350
[1] 3360
[1] 3370
[1] 3380
[1] 3390
[1] 3400
[1] 3410
[1] 3420
[1] 3430
[1] 3440
[1] 3450
[1] 3460
[1] 3470
[1] 3480
[1] 3490
[1] 3500
[1] 3510
[1] 3520
[1] 3530
[1] 3540
[1] 3550
[1] 3560
[1] 3570
[1] 3580
[1] 3590
[1] 3600
[1] 3610
[1] 3620
[1] 3630
[1] 3640
[1] 3650
[1] 3660
[1] 3670
[1] 3680
[1] 3690
[1] 3700
[1] 3710
[1] 3720
[1] 3730
[1] 3740
[1] 3750
[1] 3760
[1] 3770
[1] 3780
[1] 3790
[1] 3800
[1] 3810
[1] 3820
[1] 3830
[1] 3840
[1] 3850
[1] 3860
[1] 3870
[1] 3880
[1] 3890
[1] 3900
[1] 3910
[1] 3920
[1] 3930
[1] 3940
[1] 3950
[1] 3960
[1] 3970
[1] 3980
[1] 3990
[1] 4000
[1] 4010
[1] 4020
[1] 4030
[1] 4040
[1] 4050
[1] 4060
[1] 4070
[1] 4080
[1] 4090
[1] 4100
[1] 4110
[1] 4120
[1] 4130
[1] 4140
[1] 4150
[1] 4160
[1] 4170
[1] 4180
[1] 4190
[1] 4200
[1] 4210
[1] 4220
[1] 4230
[1] 4240
[1] 4250
[1] 4260
[1] 4270
[1] 4280
[1] 4290
[1] 4300
[1] 4310
[1] 4320
[1] 4330
[1] 4340
[1] 4350
[1] 4360
[1] 4370
[1] 4380
[1] 4390
[1] 4400
[1] 4410
[1] 4420
[1] 4430
[1] 4440
[1] 4450
[1] 4460
[1] 4470
[1] 4480
[1] 4490
[1] 4500
[1] 4510
[1] 4520
[1] 4530
[1] 4540
[1] 4550
[1] 4560
[1] 4570
[1] 4580
[1] 4590
[1] 4600
[1] 4610
[1] 4620
[1] 4630
[1] 4640
[1] 4650
[1] 4660
[1] 4670
[1] 4680
[1] 4690
[1] 4700
[1] 4710
[1] 4720
[1] 4730
[1] 4740
[1] 4750
[1] 4760
[1] 4770
[1] 4780
[1] 4790
[1] 4800
[1] 4810
[1] 4820
[1] 4830
[1] 4840
[1] 4850
[1] 4860
[1] 4870
[1] 4880
[1] 4890
[1] 4900
[1] 4910
[1] 4920
[1] 4930
[1] 4940
[1] 4950
[1] 4960
[1] 4970
[1] 4980
[1] 4990
[1] 5000
[1] 5010
[1] 5020
[1] 5030
[1] 5040
[1] 5050
[1] 5060
[1] 5070
[1] 5080
[1] 5090
[1] 5100
[1] 5110
[1] 5120
[1] 5130
[1] 5140
[1] 5150
[1] 5160
[1] 5170
[1] 5180
[1] 5190
[1] 5200
[1] 5210
[1] 5220
[1] 5230
[1] 5240
[1] 5250
[1] 5260
[1] 5270
[1] 5280
[1] 5290
[1] 5300
[1] 5310
[1] 5320
[1] 5330
[1] 5340
[1] 5350
[1] 5360
[1] 5370
[1] 5380
[1] 5390
[1] 5400
[1] 5410
[1] 5420
[1] 5430
[1] 5440
[1] 5450
[1] 5460
[1] 5470
[1] 5480
[1] 5490
[1] 5500
[1] 5510
[1] 5520
[1] 5530
[1] 5540
[1] 5550
[1] 5560
[1] 5570
[1] 5580
[1] 5590
[1] 5600
[1] 5610
[1] 5620
[1] 5630
[1] 5640
[1] 5650
[1] 5660
[1] 5670
[1] 5680
[1] 5690
[1] 5700
[1] 5710
[1] 5720
[1] 5730
[1] 5740
[1] 5750
[1] 5760
[1] 5770
[1] 5780
[1] 5790
[1] 5800
[1] 5810
[1] 5820
[1] 5830
[1] 5840
[1] 5850
[1] 5860
[1] 5870
[1] 5880
[1] 5890
[1] 5900
[1] 5910
[1] 5920
[1] 5930
[1] 5940
[1] 5950
[1] 5960
[1] 5970
[1] 5980
[1] 5990
[1] 6000
[1] 6010
[1] 6020
[1] 6030
[1] 6040
[1] 6050
[1] 6060
[1] 6070
[1] 6080
[1] 6090
[1] 6100
[1] 6110
[1] 6120
[1] 6130
[1] 6140
[1] 6150
[1] 6160
[1] 6170
[1] 6180
[1] 6190
[1] 6200
[1] 6210
[1] 6220
[1] 6230
[1] 6240
[1] 6250
[1] 6260
[1] 6270
[1] 6280
[1] 6290
[1] 6300
[1] 6310
[1] 6320
[1] 6330
[1] 6340
[1] 6350
[1] 6360
[1] 6370
[1] 6380
[1] 6390
[1] 6400
[1] 6410
[1] 6420
[1] 6430
[1] 6440
[1] 6450
[1] 6460
[1] 6470
[1] 6480
[1] 6490
[1] 6500
[1] 6510
[1] 6520
[1] 6530
[1] 6540
[1] 6550
[1] 6560
[1] 6570
[1] 6580
[1] 6590
[1] 6600
[1] 6610
[1] 6620
[1] 6630
[1] 6640
[1] 6650
[1] 6660
[1] 6670
[1] 6680
[1] 6690
[1] 6700
[1] 6710
[1] 6720
[1] 6730
[1] 6740
[1] 6750
[1] 6760
[1] 6770
[1] 6780
[1] 6790
[1] 6800
[1] 6810
[1] 6820
[1] 6830
[1] 6840
[1] 6850
[1] 6860
[1] 6870
[1] 6880
[1] 6890
[1] 6900
[1] 6910
[1] 6920
[1] 6930
[1] 6940
[1] 6950
[1] 6960
[1] 6970
[1] 6980
[1] 6990
[1] 7000
[1] 7010
[1] 7020
[1] 7030
[1] 7040
[1] 7050
[1] 7060
[1] 7070
[1] 7080
[1] 7090
[1] 7100
[1] 7110
[1] 7120
[1] 7130
[1] 7140
[1] 7150
[1] 7160
[1] 7170
[1] 7180
[1] 7190
[1] 7200
[1] 7210
[1] 7220
[1] 7230
[1] 7240
[1] 7250
[1] 7260
[1] 7270
[1] 7280
[1] 7290
[1] 7300
[1] 7310
[1] 7320
[1] 7330
[1] 7340
[1] 7350
[1] 7360
[1] 7370
[1] 7380
[1] 7390
[1] 7400
[1] 7410
[1] 7420
[1] 7430
[1] 7440
[1] 7450
[1] 7460
[1] 7470
[1] 7480
[1] 7490
[1] 7500
[1] 7510
[1] 7520
[1] 7530
[1] 7540
[1] 7550
[1] 7560
[1] 7570
[1] 7580
[1] 7590
[1] 7600
[1] 7610
[1] 7620
[1] 7630
[1] 7640
[1] 7650
[1] 7660
[1] 7670
[1] 7680
[1] 7690
[1] 7700
[1] 7710
[1] 7720
[1] 7730
[1] 7740
[1] 7750
[1] 7760
[1] 7770
[1] 7780
[1] 7790
[1] 7800
[1] 7810
[1] 7820
[1] 7830
[1] 7840
[1] 7850
[1] 7860
[1] 7870
[1] 7880
[1] 7890
[1] 7900
[1] 7910
[1] 7920
[1] 7930
[1] 7940
[1] 7950
[1] 7960
[1] 7970
[1] 7980
[1] 7990
[1] 8000
[1] 8010
[1] 8020
[1] 8030
[1] 8040
[1] 8050
[1] 8060
[1] 8070
[1] 8080
[1] 8090
[1] 8100
[1] 8110
[1] 8120
[1] 8130
[1] 8140
[1] 8150
[1] 8160
[1] 8170
[1] 8180
[1] 8190
[1] 8200
[1] 8210
[1] 8220
[1] 8230
[1] 8240
[1] 8250
[1] 8260
[1] 8270
[1] 8280
[1] 8290
[1] 8300
[1] 8310
[1] 8320
[1] 8330
[1] 8340
[1] 8350
[1] 8360
[1] 8370
[1] 8380
[1] 8390
[1] 8400
[1] 8410
[1] 8420
[1] 8430
[1] 8440
[1] 8450
[1] 8460
[1] 8470
[1] 8480
[1] 8490
[1] 8500
[1] 8510
[1] 8520
[1] 8530
[1] 8540
[1] 8550
[1] 8560
[1] 8570
[1] 8580
[1] 8590
[1] 8600
[1] 8610
[1] 8620
[1] 8630
[1] 8640
[1] 8650
[1] 8660
[1] 8670
[1] 8680
[1] 8690
[1] 8700
[1] 8710
[1] 8720
[1] 8730
[1] 8740
[1] 8750
[1] 8760
[1] 8770
[1] 8780
[1] 8790
[1] 8800
[1] 8810
[1] 8820
[1] 8830
[1] 8840
[1] 8850
[1] 8860
[1] 8870
[1] 8880
[1] 8890
[1] 8900
[1] 8910
[1] 8920
[1] 8930
[1] 8940
[1] 8950
[1] 8960
[1] 8970
[1] 8980
[1] 8990
[1] 9000
[1] 9010
[1] 9020
[1] 9030
[1] 9040
[1] 9050
[1] 9060
[1] 9070
[1] 9080
[1] 9090
[1] 9100
[1] 9110
[1] 9120
[1] 9130
[1] 9140
[1] 9150
[1] 9160
[1] 9170
[1] 9180
[1] 9190
[1] 9200
[1] 9210
[1] 9220
[1] 9230
[1] 9240
[1] 9250
[1] 9260
[1] 9270
[1] 9280
[1] 9290
[1] 9300
[1] 9310
[1] 9320
[1] 9330
[1] 9340
[1] 9350
[1] 9360
[1] 9370
[1] 9380
[1] 9390
[1] 9400
[1] 9410
[1] 9420
[1] 9430
[1] 9440
[1] 9450
[1] 9460
[1] 9470
[1] 9480
[1] 9490
[1] 9500
[1] 9510
[1] 9520
[1] 9530
[1] 9540
[1] 9550
[1] 9560
[1] 9570
[1] 9580
[1] 9590
[1] 9600
[1] 9610
[1] 9620
[1] 9630
[1] 9640
[1] 9650
[1] 9660
[1] 9670
[1] 9680
[1] 9690
[1] 9700
[1] 9710
[1] 9720
[1] 9730
[1] 9740
[1] 9750
[1] 9760
[1] 9770
[1] 9780
[1] 9790
[1] 9800
[1] 9810
[1] 9820
[1] 9830
[1] 9840
[1] 9850
[1] 9860
[1] 9870
[1] 9880
[1] 9890
[1] 9900
[1] 9910
[1] 9920
[1] 9930
[1] 9940
[1] 9950
[1] 9960
[1] 9970
[1] 9980
[1] 9990
[1] 10000
> 
> sim.sum.stat <- cbind(t(y.sum.stat.array),t(x1.sum.stat.array),t(x2.sum.stat.array))
> oubmcir.par.sim <- cbind(t(model.params.array),t(reg.params.array))
> 
> rej <- abc(target=c(raw.sum.stat.y,raw.sum.stat.x1,raw.sum.stat.x2), param=oubmcir.par.sim, sumstat=sim.sum.stat, tol=tol, method="rejection"  )
> post.oubmcir <- as.data.frame(rej$unadj.values)
> 
> save.image(paste("oubmcirsimV2size",n,".RData",sep=""))
> 
> ### Bayesian Credible Interval for alpha.y
> # postTheta<-data.frame(rej$unadj.values)
> # rep<-50
> # post_sigma.sq.x<-sample(postTheta$sigma.sq.x,rep,replace = FALSE)
> # sample_sigma.sq.x<-matrix(NA,rep,sims*tolrate)
> # dim(sample_sigma.sq.x)
> #
> # for(repIndex in 1:rep){
> #   #true data
> #   #parameter
> #   #repIndex<-1
> #
> #   true.sigma.sq.x<-post_sigma.sq.x[repIndex]
> #   true.trait<-oubmcirmodel(model.params = c(true.alpha.y, true.sigma.sq.x, true.alpha.tau, true.theta.tau, true.sigma.tau),reg.params = c(true.b0,true.b1,true.b2), root=root, tree=tree)
> #
> #   raw.sum.stat.y <- sum.stat(trait = true.trait$y, tree=tree)
> #   raw.sum.stat.x1 <- sum.stat(trait = true.trait$x1, tree=tree)
> #   raw.sum.stat.x2 <- sum.stat(trait = true.trait$x2, tree=tree)
> #
> #   for(simIndex in 1:sims){
> #     if(simIndex %%10==0){print(paste("repIndex= ",repIndex," simIndex= ",simIndex,sep=""))}
> #
> #     sim.sigma.sq.x<-rinvgamma(n=1,shape=sigma.sq.x.shape,scale=sigma.sq.x.scale)
> #
> #     model.params<-c(true.alpha.y, sim.sigma.sq.x, true.alpha.tau, true.theta.tau, true.sigma.tau)
> #     reg.params<-c(true.b0,true.b1,true.b2)
> #     model.params.array[,simIndex]<-model.params#for record only
> #     reg.params.array[,simIndex]<-reg.params
> #     sim.trait<-oubmcirmodel(model.params = model.params,reg.params = reg.params, root=root, tree=tree)
> #     sim.oubmcir.trait[,1,simIndex]<-sim.trait$y
> #     sim.oubmcir.trait[,2,simIndex]<-sim.trait$x1
> #     sim.oubmcir.trait[,3,simIndex]<-sim.trait$x2
> #     y.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$y,tree=tree)
> #     x1.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$x1,tree=tree)
> #     x2.sum.stat.array[,simIndex]<- sum.stat(trait=sim.trait$x2,tree=tree)
> #   }
> #   sim.sum.stat <- cbind(t(y.sum.stat.array),t(x1.sum.stat.array),t(x2.sum.stat.array))
> #   oubmcir.par.sim <- cbind(t(model.params.array),t(reg.params.array))
> #   rej <- abc(target=c(raw.sum.stat.y,raw.sum.stat.x1,raw.sum.stat.x2), param=oubmcir.par.sim, sumstat=sim.sum.stat, tol=0.05, method="rejection"  )
> #   postTheta_sim<-data.frame(rej$unadj.values)
> #   sample_sigma.sq.x[repIndex,]<-postTheta_sim$sigma.sq.x
> # }
> # #dim(sample_sigma.sq.x)
> # sample_sigma.sq.x_median<-apply(sample_sigma.sq.x,1,median)
> #
> # # Plot
> # png("sigma.sq.x.64.png")
> # hist(postTheta$sigma.sq.x,xlim=c(0,max(postTheta$sigma.sq.x)),ylim=c(0,max.ylab),main = paste("OUBMCIR ", expression(sigma.sq.x),sep=""),breaks=5,freq=FALSE,cex.main=2.5,xlab= expression(sigma[x]^2),ylab="Density",cex.lab=1.5, cex.sub=2,col="lightgreen")
> # lines(density(postTheta$sigma.sq.x))
> # abline(v=quantile(postTheta$sigma.sq.x,probs=c(0.025,0.975)),col="red",lty=2)
> #
> # min.ylab<-min(density(postTheta$sigma.sq.x)$y)
> # max.ylab<-max(density(postTheta$sigma.sq.x)$y)
> #
> # points(post_sigma.sq.x,seq(min.ylab,max.ylab,length=rep),pch=19,cex=0.7)
> #
> # k<-(sample_sigma.sq.x_median<quantile(postTheta$sigma.sq.x,probs=0.025))+(sample_sigma.sq.x_median>quantile(postTheta$sigma.sq.x,probs=0.975))
> #
> # points(sample_sigma.sq.x_median,seq(min.ylab,max.ylab,length=rep),pch=19,cex=0.7,col=c("blue","red")[1+k])
> # segments(sample_sigma.sq.x_median,seq(min.ylab,max.ylab,length=rep),post_sigma.sq.x,seq(min.ylab,max.ylab,length=rep),col="grey")
> # dev.off()
> #
> # save.image("oubmcir_bci_sigmasqx64.RData")
> 
> proc.time()
     user    system   elapsed 
 3946.875    37.329 51480.359 
